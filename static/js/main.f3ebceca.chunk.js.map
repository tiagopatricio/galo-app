{"version":3,"sources":["components/Board.js","serviceWorker.js","index.js"],"names":["Board","state","players","squares","Array","fill","player1Move","winner","numPlays","wins","i","setState","length","this","cSquares","slice","className","onClick","handleClick","evaluateWin","id","resetEvent","renderSquare","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sdA0GeA,E,uNAvGX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAS,CAAC,IAAI,KACdC,QAASC,MAAM,GAAGC,KAAK,MACvBC,aAAa,EACbC,OAAQ,KACRC,SAAU,GAPL,E,0DAuBT,IAZU,IAAD,OACHC,EAAO,CACT,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IATA,WAYDC,GACD,EAAKT,MAAME,QAAQM,EAAKC,GAAG,KAC1B,EAAKT,MAAME,QAAQM,EAAKC,GAAG,MAAQ,EAAKT,MAAME,QAAQM,EAAKC,GAAG,KAC9D,EAAKT,MAAME,QAAQM,EAAKC,GAAG,MAAQ,EAAKT,MAAME,QAAQM,EAAKC,GAAG,KAC1D,EAAKC,UAAS,WACV,MAAO,CAACJ,OAAQ,EAAKN,MAAME,QAAQM,EAAKC,GAAG,SALnDA,EAAI,EAAGA,EAAID,EAAKG,OAAQF,IAAK,EAA7BA,K,mCAYRG,KAAKF,SAAS,CACVR,QAASC,MAAM,GAAGC,KAAK,MAEvBE,OAAQ,KACRC,SAAU,M,kCAINE,GACR,GAA8B,OAA1BG,KAAKZ,MAAME,QAAQO,GAAa,CAChC,IAAII,EAAWD,KAAKZ,MAAME,QAAQY,QAClCD,EAASJ,GAAKG,KAAKZ,MAAMK,YAAcO,KAAKZ,MAAMC,QAAQ,GAAKW,KAAKZ,MAAMC,QAAQ,GAClFW,KAAKF,SAAS,CACVR,QAASW,EACTR,aAAcO,KAAKZ,MAAMK,YACzBE,SAAUK,KAAKZ,MAAMO,SAAW,O,mCAK/BE,GAAI,IAAD,OACZ,OAAO,4BAAQM,UAAU,SAASC,QAAS,kBAAM,EAAKC,YAAYR,KAAKG,KAAKZ,MAAME,QAAQO,M,2CAItFG,KAAKZ,MAAMM,QACXM,KAAKM,gB,+BAIH,IAAD,OACL,OAAON,KAAKZ,MAAMM,OACd,yBAAKS,UAAU,UACX,yCAAeH,KAAKZ,MAAMM,QAC1B,4BAAQa,GAAG,QAAQH,QAAS,kBAAI,EAAKI,eAArC,oBAIJ,6BACI,wBAAIL,UAAU,UAAd,gBACA,2BAAOA,UAAU,UACb,4BACI,4BAAKH,KAAKS,aAAa,IACvB,4BAAKT,KAAKS,aAAa,IACvB,4BAAKT,KAAKS,aAAa,KAE3B,4BACI,4BAAKT,KAAKS,aAAa,IACvB,4BAAKT,KAAKS,aAAa,IACvB,4BAAKT,KAAKS,aAAa,KAE3B,4BACI,4BAAKT,KAAKS,aAAa,IACvB,4BAAKT,KAAKS,aAAa,IACvB,4BAAKT,KAAKS,aAAa,MAG/B,wBAAIN,UAAU,UAAd,uBAAyCH,KAAKZ,MAAMK,YAAcO,KAAKZ,MAAMC,QAAQ,GAAKW,KAAKZ,MAAMC,QAAQ,IAC7G,yBAAKc,UAAU,UACc,IAAxBH,KAAKZ,MAAMO,SACZ,4BAAQY,GAAG,QAAQH,QAAS,kBAAM,EAAKI,eAAvC,qBACA,W,GAjGAE,aCUAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f3ebceca.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Board extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            players: ['X','O'],\r\n            squares: Array(9).fill(null),\r\n            player1Move: true,\r\n            winner: null,\r\n            numPlays: 0\r\n        }\r\n    }\r\n\r\n    evaluateWin(){\r\n        const wins = [\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            [0,4,8],\r\n            [2,4,6]\r\n        ]\r\n\r\n        for(let i = 0; i < wins.length; i++){\r\n            if(this.state.squares[wins[i][0]] && \r\n                this.state.squares[wins[i][0]] === this.state.squares[wins[i][1]] && \r\n                this.state.squares[wins[i][1]] === this.state.squares[wins[i][2]]) {\r\n                    this.setState(() => {\r\n                        return {winner: this.state.squares[wins[i][0]]}\r\n                    })\r\n                }\r\n        }\r\n    }\r\n\r\n    resetEvent(){\r\n        this.setState({\r\n            squares: Array(9).fill(null),\r\n            //player1Move: true,\r\n            winner: null,\r\n            numPlays: 0\r\n        })\r\n    }\r\n\r\n    handleClick(i) {\r\n        if (this.state.squares[i] === null) {\r\n            let cSquares = this.state.squares.slice()\r\n            cSquares[i] = this.state.player1Move ? this.state.players[0] : this.state.players[1]\r\n            this.setState({\r\n                squares: cSquares,\r\n                player1Move: !this.state.player1Move,\r\n                numPlays: this.state.numPlays + 1\r\n            })\r\n        }\r\n    }\r\n    \r\n    renderSquare(i) {\r\n        return <button className='square' onClick={() => this.handleClick(i)}>{this.state.squares[i]}</button>\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(!this.state.winner) {\r\n            this.evaluateWin()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.state.winner ? (\r\n            <div className='center'>\r\n                <h1>Vencedor: {this.state.winner}</h1>\r\n                <button id='reset' onClick={()=>this.resetEvent()}>Jogar novamente</button>\r\n            </div>\r\n        ) :\r\n        (\r\n            <div>\r\n                <h1 className='center'>Jogo do Galo</h1>\r\n                <table className='center'>\r\n                    <tr>\r\n                        <td>{this.renderSquare(0)}</td>\r\n                        <td>{this.renderSquare(1)}</td>\r\n                        <td>{this.renderSquare(2)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{this.renderSquare(3)}</td>\r\n                        <td>{this.renderSquare(4)}</td>\r\n                        <td>{this.renderSquare(5)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{this.renderSquare(6)}</td>\r\n                        <td>{this.renderSquare(7)}</td>\r\n                        <td>{this.renderSquare(8)}</td>\r\n                    </tr>\r\n                </table>\r\n                <h2 className='center'>Pr√≥ximo jogador: {this.state.player1Move ? this.state.players[0] : this.state.players[1]}</h2>\r\n                <div className='center'>\r\n                    {this.state.numPlays === 9 ? \r\n                    <button id='reset' onClick={() => this.resetEvent()}>Empate: Novo Jogo</button> : \r\n                    null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './components/Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}